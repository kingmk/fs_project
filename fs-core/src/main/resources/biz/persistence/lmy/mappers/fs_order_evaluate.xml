<?xml version="1.0" encoding= "UTF-8" ?>        
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="fs_order_evaluate">
<resultMap id="fs_order_evaluate" type="com.lmy.core.model.FsOrderEvaluate">
	<result column="id" property="id"/>
	<result column="order_id" property="orderId"/>
	<result column="goods_id" property="goodsId"/>
	<result column="seller_usr_id" property="sellerUsrId"/>
	<result column="buy_usr_id" property="buyUsrId"/>
	<result column="is_auto_evaluate" property="isAutoEvaluate"/>
	<result column="status" property="status"/>
	<result column="resp_speed" property="respSpeed"/>
	<result column="major_level" property="majorLevel"/>
	<result column="service_attitude" property="serviceAttitude"/>
	<result column="evaluate_word" property="evaluateWord"/>
	<result column="create_time" property="createTime"/>
	<result column="is_anonymous" property="isAnonymous"/>
	<result column="master_reply_word" property="masterReplyWord"/>
	<result column="master_reply_time" property="masterReplyTime"/>
</resultMap>
<select id="findById" parameterType="long"  resultMap="fs_order_evaluate">
	select * from fs_order_evaluate where id=#{id}  
</select>  
<insert id="insert"  parameterType="com.lmy.core.model.FsOrderEvaluate"  useGeneratedKeys="true" keyProperty="id">
	insert into fs_order_evaluate(id ,order_id ,goods_id ,seller_usr_id ,buy_usr_id ,is_auto_evaluate ,status ,resp_speed ,major_level ,service_attitude ,evaluate_word ,create_time, is_anonymous, master_reply_word, master_reply_time)
   values(#{id,jdbcType=INTEGER} ,#{orderId,jdbcType=INTEGER} ,#{goodsId,jdbcType=INTEGER} ,#{sellerUsrId,jdbcType=INTEGER} ,#{buyUsrId,jdbcType=INTEGER} ,#{isAutoEvaluate,jdbcType=VARCHAR} ,#{status,jdbcType=VARCHAR} ,#{respSpeed,jdbcType=INTEGER} ,#{majorLevel,jdbcType=INTEGER} ,#{serviceAttitude,jdbcType=INTEGER} ,#{evaluateWord,jdbcType=VARCHAR} ,#{createTime,jdbcType=TIMESTAMP}, #{isAnonymous,jdbcType=INTEGER} ,#{masterReplyWord,jdbcType=VARCHAR} ,#{masterReplyTime,jdbcType=TIMESTAMP}) 
</insert>
<insert id="batchInsert"  parameterType="list">
	insert into fs_order_evaluate(id ,order_id ,goods_id ,seller_usr_id ,buy_usr_id ,is_auto_evaluate ,status ,resp_speed ,major_level ,service_attitude ,evaluate_word ,create_time, is_anonymous, master_reply_word, master_reply_time)
   values
	<foreach collection="list" item="item" index="index"   separator=","> 
    (#{item.id,jdbcType=INTEGER} ,#{item.orderId,jdbcType=INTEGER} ,#{item.goodsId,jdbcType=INTEGER} ,#{item.sellerUsrId,jdbcType=INTEGER} ,#{item.buyUsrId,jdbcType=INTEGER} ,#{item.isAutoEvaluate,jdbcType=VARCHAR} ,#{item.status,jdbcType=VARCHAR} ,#{item.respSpeed,jdbcType=INTEGER} ,#{item.majorLevel,jdbcType=INTEGER} ,#{item.serviceAttitude,jdbcType=INTEGER} ,#{item.evaluateWord,jdbcType=VARCHAR} ,#{item.createTime,jdbcType=TIMESTAMP}, #{item.isAnonymous,jdbcType=INTEGER} ,#{item.masterReplyWord,jdbcType=VARCHAR} ,#{item.masterReplyTime,jdbcType=TIMESTAMP})
	</foreach> 
</insert>
<update id="update"	parameterType="com.lmy.core.model.FsOrderEvaluate">
	update fs_order_evaluate
<set>
	<if test="goodsId != null">goods_id=#{goodsId},</if>
	<if test="isAutoEvaluate != null">is_auto_evaluate=#{isAutoEvaluate},</if>
	<if test="status != null">status=#{status},</if>
	<if test="respSpeed != null">resp_speed=#{respSpeed},</if>
	<if test="majorLevel != null">major_level=#{majorLevel},</if>
	<if test="serviceAttitude != null">service_attitude=#{serviceAttitude},</if>
	<if test="evaluateWord != null">evaluate_word=#{evaluateWord},</if>
	<if test="isAnonymous != null">is_anonymous=#{isAnonymous},</if>
	<if test="masterReplyWord != null">master_reply_word=#{masterReplyWord},</if>
	<if test="masterReplyTime != null">master_reply_time=#{masterReplyTime}</if>
</set>
	where id=#{id}
</update>

<select id="findByContion1" parameterType="hashmap" resultMap="fs_order_evaluate">
    select * 	from fs_order_evaluate 
   <where>
		<if test="orderId!=null">order_id = #{orderId}</if>
		<if test="sellerUsrId!=null">and seller_usr_id = #{sellerUsrId}</if>
		<if test="buyUsrId!=null">and buy_usr_id = #{buyUsrId}</if>
   </where>
</select>
<select id="statEvaluateNum" parameterType="hashmap" resultType="long">
    select count(*)	from fs_order_evaluate 
   <where>
		<if test="orderId!=null">order_id = #{orderId}</if>
		<if test="sellerUsrId!=null">and seller_usr_id = #{sellerUsrId}</if>
		<if test="buyUsrId!=null">and buy_usr_id = #{buyUsrId}</if>
   </where>
</select>
<select id="statMasterAvgScore" parameterType="hashmap" resultType="hashmap">
    select avg(resp_speed *2) as resp_speed , avg(major_level * 2) as major_level , avg(service_attitude * 2) as service_attitude	
    from fs_order_evaluate 
   <where>
		<if test="orderId!=null">order_id = #{orderId}</if>
		<if test="sellerUsrId!=null">and seller_usr_id = #{sellerUsrId}</if>
		<if test="buyUsrId!=null">and buy_usr_id = #{buyUsrId}</if>
   </where>
</select>

<select id="statMasterAvgScore2" parameterType="hashmap" resultType="double">
    select avg(resp_speed *2 + major_level * 2+service_attitude * 2 )  /3
    from fs_order_evaluate 
   <where>
		<if test="sellerUsrId!=null">and seller_usr_id = #{sellerUsrId}</if>
   </where>
</select>

<select id="statMasterAvgScore3" parameterType="hashmap" resultType="hashmap">
    select avg(resp_speed *2) as resp_speed , avg(major_level * 2) as major_level , avg(service_attitude * 2) as service_attitude,seller_usr_id
    from fs_order_evaluate 
   	where 
	 seller_usr_id in 
     <foreach collection="sellerUsrIdList"  item="item"  open="(" separator="," close=")" >
		#{item}
	</foreach>   
	group by seller_usr_id
</select>


<select id="findMasterEvaluateList" parameterType="hashmap" resultType="hashmap">
    select a.* ,b.goods_name, b.pay_rmb_amt
    from fs_order_evaluate a
    left join fs_order b
    on a.order_id =b.id
    where a.seller_usr_id = #{sellerUsrId}
    order by id desc
    limit #{limitBegin} , #{limitEnd}
</select>

<select id="statAllMasterScore1" parameterType="hashmap" resultType="hashmap">
	select a.seller_usr_id ,avg((a.resp_speed*2 +a.major_level *2 + a.service_attitude *2)/3) as num from fs_order_evaluate a
	left join fs_master_service_cate b
	on a.goods_id = b.id
	<where>
		<if test="zxCateId!=null">and b.fs_zx_cate_id=#{zxCateId}  </if>
		<if test="isPlatRecomm!=null">b.is_plat_recomm=#{isPlatRecomm}  </if>	
	</where>
		 group by a.seller_usr_id
</select>


<select id="statEvaluateByMasterCate" parameterType="hashmap" resultType="hashmap">
    select seller_usr_id, zx_cate_id, goods_name, count(*) as count, 
    sum(resp_speed) as sum_resp_speed, sum(major_level) as sum_major_level, sum(service_attitude) as sum_service_attitude 
    from
    (select a.seller_usr_id, b.zx_cate_id, b.goods_name, resp_speed, major_level, service_attitude
    from fs_order_evaluate a inner join fs_order b on a.order_id=b.id) c
    group by seller_usr_id, zx_cate_id
    order by seller_usr_id, zx_cate_id
</select>

</mapper>
